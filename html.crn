;;;
; HTML Charon code generation library.
; Outputs the code to the STDOUT, unless configured otherwise.
;;;
(declare io)

; Converts the symbol or other data types to string.
; For symbols escapes the ':' at the begining. For others just stringifies them.
(defn as-plain [sym-or-string]
  (if (symbol? sym-or-string)
    (symbol/value sym-or-string)
    (str sym-or-string)))

; Returns the built element
(defn element [name props children don't-close]
  (str "<" name (if (table/empty? props) "" " ")
    (-> (table/items props)
      (list/map (fn [pair] (str (as-plain (:1 pair)) "=\"" (:2 pair) "\"")))
      (list/join " "))
    (if (or (some? children) (= don't-close true)) "" "/")
    ">"
    children
    (if (and (some? children) (<> don't-close true)) (str "</" name ">") "")))

; A pure tag function that returns a tag built.
(defn tag [name first args? don't-close]
  (let [args (or? args? [])]
    (if (table? first)
      (element name first (list/join args "") don't-close)
      (element name {} (list/join (if (some? first) (list/prepend args first) args) "") don't-close))))

(defn !DOCTYPE [& a] (str "<!DOCTYPE " (list/join (list/map a as-plain) " ") ">"))
(defn a [f & args] (tag "a" f args))
(defn abbr [f & a] (tag "abbr" f a))
(defn acronym [f & a] (tag "acronym" f a))
(defn address [f & a] (tag "address" f a))
(defn applet [f & a] (tag "applet" f a))
(defn area [f & a] (tag "area" f a))
(defn article [f & a] (tag "article" f a))
(defn aside [f & a] (tag "aside" f a))
(defn audio [f & a] (tag "audio" f a))
(defn b [f & a] (tag "b" f a))
(defn base [f & a] (tag "base" f a))
(defn basefont [f & a] (tag "basefont" f a))
(defn bb [f & a] (tag "bb" f a))
(defn bdo [f & a] (tag "bdo" f a))
(defn big [f & a] (tag "big" f a))
(defn blockquote [f & a] (tag "blockquote" f a))
(defn body [f & a] (tag "body" f a))
(defn br [f & a] (tag "br" f a))
(defn button [f & a] (tag "button" f a))
(defn canvas [f & a] (tag "canvas" f a))
(defn caption [f & a] (tag "caption" f a))
(defn center [f & a] (tag "center" f a))
(defn cite [f & a] (tag "cite" f a))
(defn code [f & a] (tag "code" f a))
(defn col [f & a] (tag "col" f a))
(defn colgroup [f & a] (tag "colgroup" f a))
(defn command [f & a] (tag "command" f a))
(defn datagrid [f & a] (tag "datagrid" f a))
(defn datalist [f & a] (tag "datalist" f a))
(defn dd [f & a] (tag "dd" f a))
(defn del [f & a] (tag "del" f a))
(defn details [f & a] (tag "details" f a))
(defn dfn [f & a] (tag "dfn" f a))
(defn dialog [f & a] (tag "dialog" f a))
(defn dir [f & a] (tag "dir" f a))
(defn div [f & a] (tag "div" f a))
(defn dl [f & a] (tag "dl" f a))
(defn dt [f & a] (tag "dt" f a))
(defn em [f & a] (tag "em" f a))
(defn embed [f & a] (tag "embed" f a))
(defn eventsource [f & a] (tag "eventsource" f a))
(defn fieldset [f & a] (tag "fieldset" f a))
(defn figcaption [f & a] (tag "figcaption" f a))
(defn figure [f & a] (tag "figure" f a))
(defn font [f & a] (tag "font" f a))
(defn footer [f & a] (tag "footer" f a))
(defn form [f & a] (tag "form" f a))
(defn frame [f & a] (tag "frame" f a))
(defn frameset [f & a] (tag "frameset" f a))
(defn h1 [f & a] (tag "h1" f a))
(defn head [f & a] (tag "head" f a))
(defn header [f & a] (tag "header" f a))
(defn hgroup [f & a] (tag "hgroup" f a))
(defn hr [f & a] (tag "hr" f a))
(defn html [f & a] (tag "html" f a))
(defn i [f & a] (tag "i" f a))
(defn iframe [f & a] (tag "iframe" f a))
(defn img [f & a] (tag "img" f a))
(defn input [f & a] (tag "input" f a))
(defn ins [f & a] (tag "ins" f a))
(defn isindex [f & a] (tag "isindex" f a))
(defn kbd [f & a] (tag "kbd" f a))
(defn keygen [f & a] (tag "keygen" f a))
(defn label [f & a] (tag "label" f a))
(defn legend [f & a] (tag "legend" f a))
(defn li [f & a] (tag "li" f a))
(defn link [f & a] (tag "link" f a))
(defn map [f & a] (tag "map" f a))
(defn mark [f & a] (tag "mark" f a))
(defn menu [f & a] (tag "menu" f a))
(defn meta [f & a] (tag "meta" f a true))
(defn meter [f & a] (tag "meter" f a))
(defn nav [f & a] (tag "nav" f a))
(defn noframes [f & a] (tag "noframes" f a))
(defn noscript [f & a] (tag "noscript" f a))
(defn object [f & a] (tag "object" f a))
(defn ol [f & a] (tag "ol" f a))
(defn optgroup [f & a] (tag "optgroup" f a))
(defn option [f & a] (tag "option" f a))
(defn output [f & a] (tag "output" f a))
(defn p [f & a] (tag "p" f a))
(defn param [f & a] (tag "param" f a))
(defn pre [f & a] (tag "pre" f a))
(defn progress [f & a] (tag "progress" f a))
(defn q [f & a] (tag "q" f a))
(defn rp [f & a] (tag "rp" f a))
(defn rt [f & a] (tag "rt" f a))
(defn ruby [f & a] (tag "ruby" f a))
(defn s [f & a] (tag "s" f a))
(defn samp [f & a] (tag "samp" f a))
(defn script [f & a] (tag "script" f a))
(defn section [f & a] (tag "section" f a))
(defn select [f & a] (tag "select" f a))
(defn small [f & a] (tag "small" f a))
(defn source [f & a] (tag "source" f a))
(defn span [f & a] (tag "span" f a))
(defn strike [f & a] (tag "strike" f a))
(defn strong [f & a] (tag "strong" f a))
(defn style [f & a] (tag "style" f a))
(defn sub [f & a] (tag "sub" f a))
(defn sup [f & a] (tag "sup" f a))
(defn table [f & a] (tag "table" f a))
(defn tbody [f & a] (tag "tbody" f a))
(defn td [f & a] (tag "td" f a))
(defn textarea [f & a] (tag "textarea" f a))
(defn tfoot [f & a] (tag "tfoot" f a))
(defn th [f & a] (tag "th" f a))
(defn thead [f & a] (tag "thead" f a))
(defn time [f & a] (tag "time" f a))
(defn title [f & a] (tag "title" f a))
(defn tr [f & a] (tag "tr" f a))
(defn track [f & a] (tag "track" f a))
(defn tt [f & a] (tag "tt" f a))
(defn u [f & a] (tag "u" f a))
(defn ul [f & a] (tag "ul" f a))
(defn var [f & a] (tag "var" f a))
(defn video [f & a] (tag "video" f a))
(defn wbr [f & a] (tag "wbr" f a))
